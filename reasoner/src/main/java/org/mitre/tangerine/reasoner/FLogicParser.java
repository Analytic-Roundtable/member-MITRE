/*
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                   NOTICE
 *
 * This software was produced for the U. S. Government
 * under Basic Contract No. FA8702-17-C-0001, and is
 * subject to the Rights in Noncommercial Computer Software
 * and Noncommercial Computer Software Documentation
 * Clause 252.227-7014 (MAY 2013)
 *
 * (c)2016-2017 The MITRE Corporation. All Rights Reserved.
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package org.mitre.tangerine.reasoner;

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 20 14:32:55 EST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Mon Feb 20 14:32:55 EST 2017
 */
public class FLogicParser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public FLogicParser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public FLogicParser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public FLogicParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(
                new String[] { "\000\073\000\002\002\002\000\002\002\004\000\002\002"
                               + "\005\000\002\002\005\000\002\002\005\000\002\002\005"
                               + "\000\002\002\004\000\002\004\003\000\002\005\005\000"
                               + "\002\005\004\000\002\006\004\000\002\003\004\000\002"
                               + "\010\003\000\002\010\005\000\002\007\005\000\002\007"
                               + "\005\000\002\007\005\000\002\007\005\000\002\007\005"
                               + "\000\002\007\005\000\002\007\005\000\002\007\005\000"
                               + "\002\007\005\000\002\007\005\000\002\007\005\000\002"
                               + "\007\005\000\002\007\006\000\002\007\006\000\002\007"
                               + "\005\000\002\007\005\000\002\011\011\000\002\011\011"
                               + "\000\002\013\003\000\002\013\005\000\002\013\005\000"
                               + "\002\012\005\000\002\012\007\000\002\012\005\000\002"
                               + "\012\007\000\002\014\003\000\002\014\006\000\002\020"
                               + "\003\000\002\020\005\000\002\020\005\000\002\020\007"
                               + "\000\002\017\003\000\002\017\005\000\002\016\003\000"
                               + "\002\016\004\000\002\016\003\000\002\015\003\000\002"
                               + "\015\004\000\002\015\003\000\002\015\004\000\002\015"
                               + "\003\000\002\015\003\000\002\015\003\000\002\015\004" + "\000\002\015\004"
                             });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(
                new String[] { "\000\164\000\030\002\001\006\001\016\001\017\001\027"
                               + "\001\031\001\032\001\033\001\034\001\035\001\046\001"
                               + "\001\002\000\030\002\012\006\025\016\011\017\013\027"
                               + "\015\031\022\032\005\033\016\034\010\035\006\046\024"
                               + "\001\002\000\054\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013"
                               + "\uffcf\014\uffcf\015\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf"
                               + "\024\uffcf\025\uffcf\026\uffcf\030\uffcf\036\uffcf\037\uffcf\040"
                               + "\uffcf\041\uffcf\043\uffcf\045\uffcf\001\002\000\054\007\uffc9"
                               + "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\020"
                               + "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9"
                               + "\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\045"
                               + "\uffc9\001\002\000\004\030\166\001\002\000\054\007\uffcd"
                               + "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\020"
                               + "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd"
                               + "\030\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\045"
                               + "\uffcd\001\002\000\054\007\uffcb\010\uffcb\011\uffcb\012\uffcb"
                               + "\013\uffcb\014\uffcb\015\uffcb\020\uffcb\021\uffcb\022\uffcb\023"
                               + "\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb\036\uffcb\037\uffcb"
                               + "\040\uffcb\041\uffcb\043\uffcb\045\uffcb\001\002\000\004\002"
                               + "\000\001\002\000\054\007\uffca\010\uffca\011\uffca\012\uffca"
                               + "\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca\022\uffca\023"
                               + "\uffca\024\uffca\025\uffca\026\uffca\030\uffca\036\uffca\037\uffca"
                               + "\040\uffca\041\uffca\043\uffca\045\uffca\001\002\000\030\002"
                               + "\ufffb\006\ufffb\016\ufffb\017\ufffb\027\ufffb\031\ufffb\032\ufffb"
                               + "\033\ufffb\034\ufffb\035\ufffb\046\ufffb\001\002\000\020\016"
                               + "\011\017\013\031\022\032\005\033\016\034\010\035\006"
                               + "\001\002\000\006\032\164\034\163\001\002\000\010\015"
                               + "\027\026\161\030\160\001\002\000\004\030\157\001\002"
                               + "\000\004\030\156\001\002\000\006\016\155\032\154\001"
                               + "\002\000\034\007\035\010\046\011\042\012\033\013\036"
                               + "\014\043\020\040\021\037\022\044\023\045\024\034\025"
                               + "\032\040\041\001\002\000\030\002\ufffa\006\ufffa\016\ufffa"
                               + "\017\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035"
                               + "\ufffa\046\ufffa\001\002\000\020\016\011\017\013\031\022"
                               + "\032\005\033\016\034\010\035\006\001\002\000\006\015"
                               + "\027\030\ufff6\001\002\000\006\016\031\032\030\001\002"
                               + "\000\014\015\uffe5\026\uffe5\030\uffe5\036\uffe5\043\uffe5\001"
                               + "\002\000\014\015\uffe4\026\uffe4\030\uffe4\036\uffe4\043\uffe4"
                               + "\001\002\000\020\016\011\017\013\031\022\032\005\033"
                               + "\016\034\010\035\006\001\002\000\020\016\011\017\013"
                               + "\031\022\032\005\033\016\034\010\035\006\001\002\000"
                               + "\020\016\011\017\013\031\022\032\005\033\016\034\010"
                               + "\035\006\001\002\000\020\016\011\017\013\031\022\032"
                               + "\005\033\016\034\010\035\006\001\002\000\020\016\011"
                               + "\017\013\031\022\032\005\033\016\034\010\035\006\001"
                               + "\002\000\020\016\011\017\013\031\022\032\005\033\016"
                               + "\034\010\035\006\001\002\000\020\016\011\017\013\031"
                               + "\022\032\005\033\016\034\010\035\006\001\002\000\014"
                               + "\016\061\032\054\033\064\047\062\050\065\001\002\000"
                               + "\020\016\011\017\013\031\022\032\005\033\016\034\010"
                               + "\035\006\001\002\000\020\016\011\017\013\031\022\032"
                               + "\005\033\016\034\010\035\006\001\002\000\020\016\011"
                               + "\017\013\031\022\032\005\033\016\034\010\035\006\001"
                               + "\002\000\020\016\011\017\013\031\022\032\005\033\016"
                               + "\034\010\035\006\001\002\000\020\016\011\017\013\031"
                               + "\022\032\005\033\016\034\010\035\006\001\002\000\014"
                               + "\015\uffeb\026\uffeb\030\uffeb\036\uffeb\043\uffeb\001\002\000"
                               + "\014\015\ufff1\026\ufff1\030\ufff1\036\ufff1\043\ufff1\001\002"
                               + "\000\014\015\ufff2\026\ufff2\030\ufff2\036\ufff2\043\ufff2\001"
                               + "\002\000\014\015\uffed\026\uffed\030\uffed\036\uffed\043\uffed"
                               + "\001\002\000\014\015\uffe8\026\uffe8\030\uffe8\036\uffe8\043"
                               + "\uffe8\001\002\000\010\004\uffd2\005\uffd2\044\uffd2\001\002"
                               + "\000\010\036\uffe1\037\uffe1\041\uffe1\001\002\000\010\004"
                               + "\uffda\005\uffda\044\131\001\002\000\004\041\130\001\002"
                               + "\000\006\004\113\005\114\001\002\000\010\004\uffd0\005"
                               + "\uffd0\044\uffd0\001\002\000\004\004\105\001\002\000\010"
                               + "\036\100\037\102\041\101\001\002\000\004\032\077\001"
                               + "\002\000\004\004\066\001\002\000\004\042\067\001\002"
                               + "\000\004\016\070\001\002\000\004\051\071\001\002\000"
                               + "\020\016\011\017\013\031\022\032\005\033\016\034\010"
                               + "\035\006\001\002\000\006\036\074\043\075\001\002\000"
                               + "\012\015\027\030\ufff5\036\ufff5\043\ufff5\001\002\000\020"
                               + "\016\011\017\013\031\022\032\005\033\016\034\010\035"
                               + "\006\001\002\000\004\041\uffe2\001\002\000\012\015\027"
                               + "\030\ufff4\036\ufff4\043\ufff4\001\002\000\010\004\uffd1\005"
                               + "\uffd1\044\uffd1\001\002\000\010\016\061\032\054\033\064"
                               + "\001\002\000\014\015\uffe6\026\uffe6\030\uffe6\036\uffe6\043"
                               + "\uffe6\001\002\000\010\016\061\032\054\033\064\001\002"
                               + "\000\010\036\uffdf\037\uffdf\041\uffdf\001\002\000\010\036"
                               + "\uffe0\037\uffe0\041\uffe0\001\002\000\004\042\106\001\002"
                               + "\000\004\016\107\001\002\000\004\051\110\001\002\000"
                               + "\020\016\011\017\013\031\022\032\005\033\016\034\010"
                               + "\035\006\001\002\000\006\036\074\043\112\001\002\000"
                               + "\004\041\uffe3\001\002\000\022\016\011\017\013\031\022"
                               + "\032\005\033\016\034\010\035\006\042\124\001\002\000"
                               + "\022\016\011\017\013\031\022\032\005\033\016\034\010"
                               + "\035\006\042\115\001\002\000\020\016\011\017\013\031"
                               + "\022\032\005\033\016\034\010\035\006\001\002\000\010"
                               + "\036\uffdc\037\uffdc\041\uffdc\001\002\000\006\037\uffd4\043"
                               + "\uffd4\001\002\000\006\037\121\043\122\001\002\000\020"
                               + "\016\011\017\013\031\022\032\005\033\016\034\010\035"
                               + "\006\001\002\000\010\036\uffdb\037\uffdb\041\uffdb\001\002"
                               + "\000\006\037\uffd3\043\uffd3\001\002\000\020\016\011\017"
                               + "\013\031\022\032\005\033\016\034\010\035\006\001\002"
                               + "\000\010\036\uffde\037\uffde\041\uffde\001\002\000\006\037"
                               + "\121\043\127\001\002\000\010\036\uffdd\037\uffdd\041\uffdd"
                               + "\001\002\000\014\015\uffe7\026\uffe7\030\uffe7\036\uffe7\043"
                               + "\uffe7\001\002\000\020\016\011\017\132\031\022\032\005"
                               + "\033\016\034\010\035\006\001\002\000\010\004\143\036"
                               + "\uffca\045\uffca\001\002\000\006\036\135\045\136\001\002"
                               + "\000\006\036\uffd8\045\uffd8\001\002\000\020\016\011\017"
                               + "\137\031\022\032\005\033\016\034\010\035\006\001\002"
                               + "\000\006\004\uffd9\005\uffd9\001\002\000\010\004\141\036"
                               + "\uffca\045\uffca\001\002\000\006\036\uffd6\045\uffd6\001\002"
                               + "\000\020\016\011\017\013\031\022\032\005\033\016\034"
                               + "\010\035\006\001\002\000\006\036\uffd5\045\uffd5\001\002"
                               + "\000\020\016\011\017\013\031\022\032\005\033\016\034"
                               + "\010\035\006\001\002\000\006\036\uffd7\045\uffd7\001\002"
                               + "\000\014\015\uffee\026\uffee\030\uffee\036\uffee\043\uffee\001"
                               + "\002\000\014\015\ufff3\026\ufff3\030\ufff3\036\ufff3\043\ufff3"
                               + "\001\002\000\014\015\uffec\026\uffec\030\uffec\036\uffec\043"
                               + "\uffec\001\002\000\014\015\uffea\026\uffea\030\uffea\036\uffea"
                               + "\043\uffea\001\002\000\014\015\ufff0\026\ufff0\030\ufff0\036"
                               + "\ufff0\043\ufff0\001\002\000\014\015\uffe9\026\uffe9\030\uffe9"
                               + "\036\uffe9\043\uffe9\001\002\000\014\015\uffef\026\uffef\030"
                               + "\uffef\036\uffef\043\uffef\001\002\000\054\007\uffc8\010\uffc8"
                               + "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\020\uffc8\021"
                               + "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8"
                               + "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\045\uffc8\001"
                               + "\002\000\054\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7"
                               + "\014\uffc7\015\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024"
                               + "\uffc7\025\uffc7\026\uffc7\030\uffc7\036\uffc7\037\uffc7\040\uffc7"
                               + "\041\uffc7\043\uffc7\045\uffc7\001\002\000\030\002\ufffe\006"
                               + "\ufffe\016\ufffe\017\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe"
                               + "\034\ufffe\035\ufffe\046\ufffe\001\002\000\030\002\uffff\006"
                               + "\uffff\016\uffff\017\uffff\027\uffff\031\uffff\032\uffff\033\uffff"
                               + "\034\uffff\035\uffff\046\uffff\001\002\000\030\002\ufffc\006"
                               + "\ufffc\016\ufffc\017\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc"
                               + "\034\ufffc\035\ufffc\046\ufffc\001\002\000\022\016\011\017"
                               + "\013\030\ufff8\031\022\032\005\033\016\034\010\035\006"
                               + "\001\002\000\006\030\ufff9\036\074\001\002\000\054\007"
                               + "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc"
                               + "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026"
                               + "\uffcc\030\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc"
                               + "\045\uffcc\001\002\000\054\007\uffce\010\uffce\011\uffce\012"
                               + "\uffce\013\uffce\014\uffce\015\uffce\020\uffce\021\uffce\022\uffce"
                               + "\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\036\uffce\037"
                               + "\uffce\040\uffce\041\uffce\043\uffce\045\uffce\001\002\000\006"
                               + "\030\ufff7\036\074\001\002\000\030\002\ufffd\006\ufffd\016"
                               + "\ufffd\017\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd"
                               + "\035\ufffd\046\ufffd\001\002"
                             });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(
                new String[] { "\000\164\000\004\002\003\001\001\000\016\003\006\004"
                               + "\013\005\017\006\020\007\016\015\022\001\001\000\002"
                               + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                               + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                               + "\000\002\001\001\000\010\007\072\010\164\015\022\001"
                               + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                               + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                               + "\002\001\001\000\006\007\025\015\022\001\001\000\002"
                               + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                               + "\001\000\004\015\152\001\001\000\004\015\151\001\001"
                               + "\000\004\015\150\001\001\000\004\015\147\001\001\000"
                               + "\004\015\146\001\001\000\004\015\145\001\001\000\004"
                               + "\015\144\001\001\000\014\011\056\012\054\013\062\014"
                               + "\057\016\055\001\001\000\004\015\052\001\001\000\004"
                               + "\015\051\001\001\000\004\015\050\001\001\000\004\015"
                               + "\047\001\001\000\004\015\046\001\001\000\002\001\001"
                               + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                               + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                               + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                               + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                               + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                               + "\002\001\001\000\010\007\072\010\071\015\022\001\001"
                               + "\000\002\001\001\000\002\001\001\000\006\007\075\015"
                               + "\022\001\001\000\002\001\001\000\002\001\001\000\002"
                               + "\001\001\000\010\012\103\014\057\016\055\001\001\000"
                               + "\002\001\001\000\010\012\102\014\057\016\055\001\001"
                               + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                               + "\002\001\001\000\002\001\001\000\010\007\072\010\110"
                               + "\015\022\001\001\000\002\001\001\000\002\001\001\000"
                               + "\004\015\124\001\001\000\004\015\115\001\001\000\006"
                               + "\015\116\017\117\001\001\000\002\001\001\000\002\001"
                               + "\001\000\002\001\001\000\004\015\122\001\001\000\002"
                               + "\001\001\000\002\001\001\000\006\015\116\017\125\001"
                               + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                               + "\000\002\001\001\000\006\015\133\020\132\001\001\000"
                               + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
                               + "\015\137\001\001\000\002\001\001\000\002\001\001\000"
                               + "\002\001\001\000\004\015\141\001\001\000\002\001\001"
                               + "\000\004\015\143\001\001\000\002\001\001\000\002\001"
                               + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                               + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                               + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                               + "\001\001\000\002\001\001\000\010\007\072\010\161\015"
                               + "\022\001\001\000\002\001\001\000\002\001\001\000\002"
                               + "\001\001\000\002\001\001\000\002\001\001"
                             });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$FLogicParser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$FLogicParser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
            int top) throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$FLogicParser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }

    /** Scan to get the next Symbol. */
    @Override
    public java_cup.runtime.Symbol scan() throws java.lang.Exception {
        return lexer.next_token();
    }

    FLogicLexer lexer;
    FLogicDriver driver;

    public FLogicParser(FLogicLexer lex, FLogicDriver dri) {
        super(lex);
        lexer = lex;
        driver = dri;
    }

    @Override
    public void report_error(String message, Object info) {
        System.out.println(message);
        if (!(info instanceof Symbol))
            return;
        Symbol symbol = (Symbol) info;
        if (symbol.left < 0 || symbol.right < 0)
            return;
        System.out.println(" at line " + symbol.left + ", column " + symbol.right);
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$FLogicParser$actions {
    private final FLogicParser parser;

    /** Constructor */
    CUP$FLogicParser$actions(FLogicParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$FLogicParser$do_action(int CUP$FLogicParser$act_num,
            java_cup.runtime.lr_parser CUP$FLogicParser$parser, java.util.Stack CUP$FLogicParser$stack,
            int CUP$FLogicParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$FLogicParser$result;

        /* select the action based on the action number */
        switch (CUP$FLogicParser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 58: { // value ::= NOT VARIABLE
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = "~" + v;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 57: { // value ::= NOT ALPHA
            String RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = "~" + a;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 56: { // value ::= NUMBER
            String RESULT = null;
            int nleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int nright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String n = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = n;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 55: { // value ::= ATTRIBUTE
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = v;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 54: { // value ::= VARIABLE
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = v;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 53: { // value ::= NAMESPACE STRING_LITERAL
            String RESULT = null;
            int nleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int nright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            String n = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 1)).value;
            int lleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int lright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String l = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = n + l;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 52: { // value ::= STRING_LITERAL
            String RESULT = null;
            int lleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int lright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String l = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = l;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 51: { // value ::= NAMESPACE ALPHA
            String RESULT = null;
            int nleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int nright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            String n = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 1)).value;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = n + a;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 50: { // value ::= ALPHA
            String RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = a;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("value", 11,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 49: { // pred ::= VARIABLE
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = v;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("pred", 12,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 48: { // pred ::= NAMESPACE ALPHA
            String RESULT = null;
            int nleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int nright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            String n = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 1)).value;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = n + a;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("pred", 12,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 47: { // pred ::= ALPHA
            String RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = a;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("pred", 12,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 46: { // values ::= values SEMI_COLON value
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.addArg(v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("values", 13,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 45: { // values ::= value
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.initArgs(v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("values", 13,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 44: { // args ::= args COMMA ATTRIBUTE LINK value
            String RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.addArg(a + "->" + v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("args", 14,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 43: { // args ::= args COMMA value
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.addArg(v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("args", 14,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 42: { // args ::= ATTRIBUTE LINK value
            String RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.initArgs(a + "->" + v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("args", 14,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 41: { // args ::= value
            String RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.initArgs(v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("args", 14,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 40: { // predExpr ::= pred OPEN_PAREN args CLOSE_PAREN
            String RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String p = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            RESULT = parser.driver.createPredExpr(p);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predExpr", 10,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 39: { // predExpr ::= pred
            String RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String p = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = p;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predExpr", 10,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 38: { // predValue ::= predExpr PDEF_LINK LEFT_BRACES values RIGHT_BRACES
            PredValue RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)).right;
            String p = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 4)).value;
            int ileft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String i = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            RESULT = parser.driver.createNewPredValue(p, i);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValue", 8,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 37: { // predValue ::= predExpr PDEF_LINK value
            PredValue RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String p = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int ileft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            String i = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 1)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.initArgs(v);
            RESULT = parser.driver.createNewPredValue(p, i);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValue", 8,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 36: { // predValue ::= predExpr LINK LEFT_BRACES values RIGHT_BRACES
            PredValue RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)).right;
            String p = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 4)).value;
            int ileft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String i = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            RESULT = parser.driver.createNewPredValue(p, i);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValue", 8,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 4)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 35: { // predValue ::= predExpr LINK value
            PredValue RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String p = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int ileft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int iright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            String i = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 1)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.initArgs(v);
            RESULT = parser.driver.createNewPredValue(p, i);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValue", 8,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 34: { // predValues ::= predValues SEMI_COLON predValue
            PredValue RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            PredValue s = (PredValue) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                       .elementAt(CUP$FLogicParser$top - 2)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            PredValue v = (PredValue) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = s;
            parser.driver.addDisjunct(s, v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValues", 9,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 33: { // predValues ::= predValues COMMA predValue
            PredValue RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            PredValue s = (PredValue) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                       .elementAt(CUP$FLogicParser$top - 2)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            PredValue v = (PredValue) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = s;
            parser.driver.addConjunct(s, v);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValues", 9,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 32: { // predValues ::= predValue
            PredValue RESULT = null;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            PredValue p = (PredValue) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = p;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("predValues", 9,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 31: { // aggregate ::= LENGTHOF LINK LEFT_BRACES VARIABLE BAR expressions RIGHT_BRACES
            Aggregate RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 1)).value;
            RESULT = parser.driver.createNewAggregate("lengthof", v, e);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("aggregate", 7,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 6)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 30: { // aggregate ::= SETOF LINK LEFT_BRACES VARIABLE BAR expressions RIGHT_BRACES
            Aggregate RESULT = null;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 1)).value;
            RESULT = parser.driver.createNewAggregate("setof", v, e);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("aggregate", 7,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 6)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 29: { // expression ::= expression AT VARIABLE
            Expression RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 2)).value;
            int vleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int vright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String v = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            e.setGraph(v);
            RESULT = e;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 28: { // expression ::= expression AT ALPHA
            Expression RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 2)).value;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            e.setGraph(a);
            RESULT = e;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 27: { // expression ::= value LEFT_BRACKET predValues RIGHT_BRACKET
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            int pleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int pright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            PredValue p = (PredValue) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                       .elementAt(CUP$FLogicParser$top - 1)).value;
            RESULT = parser.driver.createNewExpression(s, p);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 26: { // expression ::= value LEFT_BRACKET aggregate RIGHT_BRACKET
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 3)).value;
            int aleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            Aggregate a = (Aggregate) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                       .elementAt(CUP$FLogicParser$top - 1)).value;
            RESULT = parser.driver.createNewExpression(s, a);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 3)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 25: { // expression ::= value GREATER_THAN value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, ">", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 24: { // expression ::= value GREATER_THAN_EQ value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, ">=", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 23: { // expression ::= value LESS_THAN value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "<", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 22: { // expression ::= value LESS_THAN_EQ value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "=<", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 21: { // expression ::= value EQ value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "==", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 20: { // expression ::= value NE value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "!=", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 19: { // expression ::= value SAMEAS value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, ":=:", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 18: { // expression ::= value DIRSUBCLASSOF value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "<::", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 17: { // expression ::= value SUBPROPERTYOF value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, ":->:", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 16: { // expression ::= value SUBCLASSOF value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "::", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 15: { // expression ::= value DIRINSTANCEOF value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, "<:", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 14: { // expression ::= value INSTANCEOF value
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            String s = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 2)).value;
            int oleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int oright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            String o = (String) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = parser.driver.createNewExpression(s, ":", o);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expression", 5,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 13: { // expressions ::= expressions COMMA expression
            Expression RESULT = null;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            Expression s = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 2)).value;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.addExpression(s, e);
            RESULT = s;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expressions", 6,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 12: { // expressions ::= expression
            Expression RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            RESULT = e;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("expressions", 6,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 11: { // command ::= RETRACT expression
            Object RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.delAssertion(e);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("command", 1,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 10: { // goal ::= GOAL_DECL expressions
            Expression RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.createNewGoal(e);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("goal", 4,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 9: { // rule ::= expression RULE_DECL
            Expression RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 1)).value;
            parser.driver.createNewRule(e, null);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("rule", 3,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 8: { // rule ::= expression RULE_DECL expressions
            Expression RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 2)).value;
            int sleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).left;
            int sright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).right;
            Expression s = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()).value;
            parser.driver.createNewRule(e, s);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("rule", 3,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 7: { // comment ::= COMMENT
            Object RESULT = null;

            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("comment", 2,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 6: { // stmt ::= stmt comment
            Object RESULT = null;

            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("stmt", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 5: { // stmt ::= stmt expression PERIOD
            Object RESULT = null;
            int eleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).left;
            int eright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)).right;
            Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                         .elementAt(CUP$FLogicParser$top - 1)).value;
            if (e.getPreds().getType().contains("->"))
                parser.driver.addAssertion(e);
            else
                parser.driver.addPredicate(e);
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("stmt", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 4: { // stmt ::= stmt command PERIOD
            Object RESULT = null;

            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("stmt", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 3: { // stmt ::= stmt goal PERIOD
            Object RESULT = null;

            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("stmt", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 2: { // stmt ::= stmt rule PERIOD
            Object RESULT = null;

            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("stmt", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 2)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 1: { // $START ::= stmt EOF
            Object RESULT = null;
            int start_valleft = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                 .elementAt(CUP$FLogicParser$top - 1)).left;
            int start_valright = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                  .elementAt(CUP$FLogicParser$top - 1)).right;
            Object start_val = ((java_cup.runtime.Symbol) CUP$FLogicParser$stack
                                .elementAt(CUP$FLogicParser$top - 1)).value;
            RESULT = start_val;
            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("$START", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.elementAt(CUP$FLogicParser$top - 1)),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
            /* ACCEPT */
        CUP$FLogicParser$parser.done_parsing();
        return CUP$FLogicParser$result;

        /* . . . . . . . . . . . . . . . . . . . . */
        case 0: { // stmt ::=
            Object RESULT = null;

            CUP$FLogicParser$result = parser.getSymbolFactory().newSymbol("stmt", 0,
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()),
                                      ((java_cup.runtime.Symbol) CUP$FLogicParser$stack.peek()), RESULT);
        }
        return CUP$FLogicParser$result;

        /* . . . . . . */
        default:
            throw new Exception("Invalid action number found in internal parse table");

        }
    }
}
